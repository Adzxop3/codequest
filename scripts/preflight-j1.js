#!/usr/bin/env node

/**
 * CodeQuest 2.3 - J1 Pre-flight Checklist
 * V√©rifie tout avant le jour J
 */

const fs = require('fs');
const path = require('path');
const { execSync, spawn } = require('child_process');
const { createServer } = require('http');

class PreflightJ1 {
  constructor() {
    this.checks = [];
    this.errors = [];
    this.warnings = [];
    this.serverProcess = null;
    this.startTime = Date.now();
  }

  log(message, type = 'info') {
    const icons = {
      info: '‚ÑπÔ∏è',
      success: '‚úÖ',
      warning: '‚ö†Ô∏è',
      error: '‚ùå',
      step: 'üéØ'
    };
    console.log(`${icons[type]} ${message}`);
    
    this.checks.push({
      message,
      type,
      timestamp: new Date().toISOString()
    });
  }

  async sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // Check environment
  async checkEnvironment() {
    this.log('='.repeat(60), 'info');
    this.log('PHASE 1: Environment Check', 'step');
    this.log('='.repeat(60), 'info');

    // Node version
    const nodeVersion = process.version;
    const major = parseInt(nodeVersion.slice(1).split('.')[0]);
    if (major >= 16) {
      this.log(`Node.js ${nodeVersion} ‚úì`, 'success');
    } else {
      this.log(`Node.js ${nodeVersion} - Version trop ancienne (requis: 16+)`, 'error');
      this.errors.push('Node.js version');
    }

    // npm available
    try {
      const npmVersion = execSync('npm -v', { encoding: 'utf8' }).trim();
      this.log(`npm ${npmVersion} ‚úì`, 'success');
    } catch {
      this.log('npm non disponible', 'error');
      this.errors.push('npm missing');
    }

    // Essential files
    const essentialFiles = [
      'src/cli/cli-v2.js',
      'control-room/index.html',
      'control-room/roadmap.html',
      'levels/act-1/N00-warmup',
      'student-workspace',
      'package.json'
    ];

    for (const file of essentialFiles) {
      if (fs.existsSync(file)) {
        this.log(`${file} ‚úì`, 'success');
      } else {
        this.log(`${file} manquant`, 'error');
        this.errors.push(`Missing: ${file}`);
      }
    }

    // Port availability
    await this.checkPorts();
  }

  async checkPorts() {
    const ports = [3000, 3001, 8080];
    
    for (const port of ports) {
      try {
        const server = createServer();
        await new Promise((resolve, reject) => {
          server.once('error', reject);
          server.once('listening', () => {
            server.close();
            resolve();
          });
          server.listen(port);
        });
        
        this.log(`Port ${port} disponible ‚úì`, 'success');
        return port; // Return first available port
      } catch {
        this.log(`Port ${port} occup√©`, 'warning');
      }
    }
    
    this.log('Aucun port disponible dans 3000-8080', 'error');
    this.errors.push('No ports available');
    return null;
  }

  // Test CLI commands
  async testCLICommands() {
    this.log('='.repeat(60), 'info');
    this.log('PHASE 2: CLI Commands Test', 'step');
    this.log('='.repeat(60), 'info');

    const commands = [
      { cmd: 'node src/cli/cli-v2.js --version', desc: 'Version check' },
      { cmd: 'node src/cli/cli-v2.js --help', desc: 'Help display' },
      { cmd: 'node src/cli/cli-v2.js list', desc: 'List scenes' },
      { cmd: 'node src/cli/cli-v2.js start N00', desc: 'Start scene N00' },
      { cmd: 'node src/cli/cli-v2.js validate N00 --dry-run', desc: 'Validate (dry run)' },
      { cmd: 'node src/cli/cli-v2.js help-me N00', desc: 'Show hints' },
      { cmd: 'node src/cli/cli-v2.js reset N00', desc: 'Reset scene' },
      { cmd: 'node src/cli/cli-v2.js status', desc: 'Show progress' },
      { cmd: 'npm run smoke-test', desc: 'Smoke test' },
      { cmd: 'npm run demo', desc: 'Generate demo data' }
    ];

    let commandsOk = 0;

    for (const { cmd, desc } of commands) {
      try {
        execSync(cmd, { 
          encoding: 'utf8', 
          stdio: 'pipe',
          timeout: 10000 
        });
        this.log(`${desc} ‚úì`, 'success');
        commandsOk++;
      } catch (error) {
        this.log(`${desc} ‚ùå - ${error.message}`, 'error');
        this.errors.push(`CLI: ${desc}`);
      }
    }

    this.log(`Commandes CLI: ${commandsOk}/${commands.length} r√©ussies`, 'info');
  }

  // Start servers and open views
  async startServersAndViews() {
    this.log('='.repeat(60), 'info');
    this.log('PHASE 3: Start Servers & Open Views', 'step');
    this.log('='.repeat(60), 'info');

    // Start control room server
    this.log('D√©marrage du serveur Control Room...', 'info');
    this.serverProcess = spawn('node', ['src/static-server.js'], {
      detached: false,
      stdio: 'pipe'
    });

    // Wait for server to start
    await this.sleep(3000);

    // Test server accessibility
    try {
      const http = require('http');
      
      const testUrl = (url) => new Promise((resolve, reject) => {
        http.get(url, (res) => {
          if (res.statusCode === 200) {
            resolve(true);
          } else {
            reject(new Error(`Status: ${res.statusCode}`));
          }
        }).on('error', reject);
      });

      await testUrl('http://localhost:3000/');
      this.log('Control Room accessible ‚úì', 'success');

      await testUrl('http://localhost:3000/roadmap');
      this.log('Student Roadmap accessible ‚úì', 'success');

    } catch (error) {
      this.log(`Serveur inaccessible: ${error.message}`, 'error');
      this.errors.push('Server not accessible');
    }

    // Open views automatically
    this.openViews();
  }

  openViews() {
    const urls = [
      'http://localhost:3000/',              // Control Room
      'http://localhost:3000/roadmap'       // Student Roadmap  
    ];

    this.log('Ouverture automatique des vues...', 'info');

    urls.forEach((url, index) => {
      setTimeout(() => {
        try {
          const command = process.platform === 'win32' ? 'start' : 
                         process.platform === 'darwin' ? 'open' : 'xdg-open';
          execSync(`${command} ${url}`, { stdio: 'ignore' });
          
          const viewName = url.includes('roadmap') ? 'Student Roadmap' : 'Control Room';
          this.log(`${viewName} ouvert ‚úì`, 'success');
        } catch (error) {
          this.log(`Impossible d'ouvrir ${url}`, 'warning');
        }
      }, index * 1000);
    });
  }

  // Check offline package
  checkOfflinePackage() {
    this.log('='.repeat(60), 'info');
    this.log('PHASE 4: Offline Package Check', 'step');
    this.log('='.repeat(60), 'info');

    const offlineItems = [
      'dist/offline-kit',
      'codequest-offline-kit.zip',
      'scripts/package-offline.js'
    ];

    let packageReady = true;

    for (const item of offlineItems) {
      if (fs.existsSync(item)) {
        const stats = fs.statSync(item);
        const size = stats.isDirectory() ? 'directory' : `${Math.round(stats.size/1024/1024)}MB`;
        this.log(`${item} (${size}) ‚úì`, 'success');
      } else {
        this.log(`${item} manquant - G√©n√©ration...`, 'warning');
        packageReady = false;
      }
    }

    if (!packageReady) {
      try {
        execSync('npm run package:offline', { encoding: 'utf8', stdio: 'pipe' });
        this.log('Package offline g√©n√©r√© ‚úì', 'success');
      } catch (error) {
        this.log('√âchec g√©n√©ration package offline', 'error');
        this.errors.push('Offline package generation failed');
      }
    }
  }

  // Generate materials
  generateMaterials() {
    this.log('='.repeat(60), 'info');
    this.log('PHASE 5: Generate Materials', 'step');
    this.log('='.repeat(60), 'info');

    // Generate video script
    this.generateVideoScript();
    
    // Generate blueprint
    this.generateBlueprint();
    
    // Update runbook
    this.updateRunbook();
  }

  generateVideoScript() {
    const script = `# üé¨ CodeQuest 2.3 - Vid√©o d'Introduction (3 min)

## üéØ Objectif
Pr√©senter CodeQuest 2.3 aux √©tudiants - de z√©ro au premier niveau r√©ussi en 3 minutes.

## üìù Script avec Captions

### [00:00-00:15] - Hook & Pr√©sentation
**Caption:** "CodeQuest 2.3 - Apprendre JavaScript en r√©solvant des missions"

**Voix Off:** 
"Salut ! Aujourd'hui on va d√©couvrir CodeQuest 2.3, une plateforme gamifi√©e pour apprendre JavaScript. En 3 minutes, tu vas passer de z√©ro √† ta premi√®re mission r√©ussie !"

**√Ä l'√©cran:** Animation logo CodeQuest ‚Üí Roadmap avec niveaux

### [00:15-00:45] - Interface D√©couverte  
**Caption:** "Interface intuitive - Roadmap visuelle de progression"

**Voix Off:**
"Voici ta roadmap personnalis√©e. Chaque hexagone repr√©sente une mission. Tu commences par N00, puis tu d√©bloques progressivement N01, N02, etc. Les couleurs indiquent ton avancement : gris = √† faire, bleu = en cours, vert = r√©ussi."

**√Ä l'√©cran:** 
- Zoom sur roadmap
- Survol des niveaux N00-N06
- √âtats : locked ‚Üí current ‚Üí completed

### [00:45-01:15] - Premier Niveau
**Caption:** "Mission N00 - Warm-up : V√©rification environnement"

**Voix Off:**
"Cliquons sur N00 pour commencer. Cette premi√®re mission v√©rifie que ton environnement est pr√™t. Tu vois les objectifs, les instructions, et 3 boutons : Start pour commencer, Validate pour tester, Help pour des indices."

**√Ä l'√©cran:**
- Clic N00 ‚Üí Panel s'ouvre
- Scroll dans README
- Boutons Start/Validate/Help mis en √©vidence

### [01:15-01:45] - CLI en Action
**Caption:** "Terminal int√©gr√© - Commandes simples et puissantes"

**Voix Off:**
"On commence avec 'cq start N00'. Cette commande copie les fichiers de d√©part dans ton workspace. Puis on code dans notre √©diteur favori. Une fois fini, 'cq validate N00' lance les tests automatiquement."

**√Ä l'√©cran:**
- Terminal : cq start N00
- Fichiers copi√©s dans student-workspace/
- √âditeur avec warmup.js
- Terminal : cq validate N00

### [01:45-02:15] - Syst√®me de Tests
**Caption:** "Tests automatis√©s - Feedback instantan√©"

**Voix Off:**
"Les tests te disent exactement ce qui marche et ce qui ne marche pas. Messages clairs, pas de myst√®re. Si tu r√©ussis tous les tests de base : badge vert. Si tu finis rapidement : badge dor√© bonus. Si tu ma√Ætrises sans aide : badge l√©gendaire !"

**√Ä l'√©cran:**
- Tests qui passent un par un ‚úÖ
- Badges base/bonus/challenge
- Retour sur roadmap avec N00 en vert

### [02:15-02:45] - Progression & Gamification
**Caption:** "Progression gamifi√©e - D√©blocage progressif des niveaux"

**Voix Off:**
"Chaque r√©ussite d√©bloque le niveau suivant. Tu accumules des points, des badges. Le formateur peut suivre ta progression en temps r√©el via le Control Room. Et si tu bloques, le syst√®me d'indices t'accompagne √©tape par √©tape."

**√Ä l'√©cran:**
- Animation d√©blocage N01
- Score qui augmente  
- Control Room formateur (vue rapide)
- Syst√®me hints H1‚ÜíH2‚ÜíH3

### [02:45-03:00] - Call to Action
**Caption:** "Pr√™t √† coder ? Lance ta premi√®re mission !"

**Voix Off:**
"C'est parti ! Lance ton terminal, tape 'cq start N00', et embarque dans l'aventure CodeQuest. Bon code !"

**√Ä l'√©cran:**
- Retour roadmap
- N00 qui pulse "Start Here"
- Logo CodeQuest final

## üé• Instructions Tournage

### Setup Technique
- **R√©solution:** 1920x1080, 60fps  
- **Navigateur:** Chrome en mode plein √©cran
- **Terminal:** Police large (16pt minimum)
- **Curseur:** Visible et anim√©

### Timing Critique
- **0-15s:** Hook fort, rythme soutenu
- **15-45s:** D√©couverte interface, tempo calme  
- **45s-2m15:** Demo technique, rythme moyen
- **2m15-3m:** Motivation, mont√©e d'√©nergie

### √âl√©ments Visuels Cl√©s
1. **Transitions fluides** entre √©crans
2. **Zoom/Focus** sur √©l√©ments importants  
3. **Animations cursor** pour guider l'≈ìil
4. **Sound design** : clic, success, notifications
5. **Branding** : Logo discret mais pr√©sent

### Post-Production
- **Captions:** Police sans-serif, contraste √©lev√©
- **Musique:** Background tech/gaming, volume -20dB
- **Exports:** MP4 H.264, sous-titres .srt inclus
- **Dur√©e finale:** 2:50-3:10 maximum

---

*Script g√©n√©r√© automatiquement par CodeQuest 2.3 Preflight*
*Timestamp: ${new Date().toISOString()}*`;

    fs.writeFileSync('materials/video-script-3min.md', script);
    this.log('Script vid√©o 3 min g√©n√©r√© ‚úì', 'success');
  }

  generateBlueprint() {
    const blueprint = `# üìã CodeQuest 2.3 - Blueprint Act I

## üéØ Vue d'ensemble Act I

### Objectifs p√©dagogiques
- **Variables & const** : Immutabilit√© JavaScript
- **Template literals** : Formatage moderne  
- **Fonctions pures** : Programmation fonctionnelle
- **Destructuring & spread** : Syntaxe ES6+
- **Collections** : map, filter, reduce
- **Modules** : Import/export, composition
- **Int√©gration** : Boss combinant tous les concepts

### Progression sugg√©r√©e (120 min)
1. **N00 - Warmup** (5 min) : Environnement ‚úì
2. **N01 - Variables** (15 min) : const, template literals  
3. **N02 - Immutability** (20 min) : Deep freeze, no mutations
4. **N03 - Destructuring** (15 min) : { }, [ ], spread operator
5. **N04 - Collections** (25 min) : map, filter, reduce chains
6. **N05 - Modules** (20 min) : Composition de fonctions
7. **N06 - Boss** (20 min) : Int√©gration finale leaderboard

## üéÆ M√©caniques de jeu

### Syst√®me de scoring
- **Base (100 pts)** : Tests de base r√©ussis
- **Bonus (150 pts)** : Temps < seuil OU style √©l√©gant  
- **Challenge (200 pts)** : Sans hints ET temps record

### Syst√®me d'indices (H1‚ÜíH2‚ÜíH3)
- **H1** : Direction g√©n√©rale, concept cl√©
- **H2** : Structure de code, exemples
- **H3** : Solution quasi-compl√®te

### √âtats visuels roadmap
- **üîí Locked** : Gris, non-cliquable
- **üéØ Current** : Bleu pulsant, ready to start
- **‚úÖ Completed** : Vert, score affich√©
- **‚≠ê Bonus** : Dor√©, effet sparkle
- **üèÜ Challenge** : Violet, effet legendary

## üîß Commandes essentielles

### √âtudiants
\`\`\`bash
cq start N00        # Commencer une sc√®ne
cq validate N00     # Tester sa solution  
cq help-me N00      # Obtenir des indices
cq status           # Voir sa progression
\`\`\`

### Formateurs  
\`\`\`bash
npm run control-room     # Interface monitoring
npm run demo             # G√©n√©rer donn√©es fictives
npm run smoke-test       # V√©rifier environnement
npm run preflight:j1     # Checklist compl√®te
\`\`\`

## üìä M√©triques de r√©ussite

### Indicateurs verts üü¢
- **>80%** √©tudiants finissent N00-N06
- **<30 min** temps moyen par niveau  
- **<3 hints** moyenne par √©tudiant
- **0 blocage** technique environnement

### Signaux d'alerte üî¥  
- **>45 min** sur un niveau = stuck
- **>5 hints** = struggling  
- **0 progression** apr√®s 20 min = help needed

## üéØ Points de contr√¥le formateur

### 15 min : Checkpoint N01
- Tous ont d√©marr√© N00 ‚úÖ
- Premiers sur N01 Variables ‚úÖ  
- Aucun bloqu√© sur setup ‚úÖ

### 45 min : Checkpoint N03  
- Groupe majoritairement sur N02-N03 ‚úÖ
- Niveaux N00-N01 compl√©t√©s ‚úÖ
- Plan B activ√© si >20% stuck ‚ö†Ô∏è

### 75 min : Checkpoint N05
- Leaders attaquent N05-N06 ‚úÖ
- Queue groupe sur N03-N04 ‚úÖ  
- Assistance individuelle cibl√©e ‚úÖ

### 105 min : Boss Time
- Majorit√© sur N06 Boss ‚úÖ
- Quelques completions N06 ‚úÖ
- D√©briefing collectif pr√©par√© ‚úÖ

## üÜò Plan B - Actions d'urgence

### Si >30% stuck (slider configurable)
- ‚úÖ Unlock all hints globalement
- ‚úÖ Mark N08-N10 optional (futures extensions)
- ‚úÖ Lower boss pass to 3/5 tests
- ‚úÖ Projector mode pour aide collective

### Si serveur crash  
- ‚úÖ Kit offline pr√™t (.zip complet)
- ‚úÖ Setup scripts Win/Mac/Linux  
- ‚úÖ Mode d√©grad√© sans interface web

### Si environnement hostile
- ‚úÖ Troubleshooting.md complet
- ‚úÖ Solutions Windows/antivirus/proxy
- ‚úÖ Backup sur cl√©s USB multiples

## üìà Post-session Analytics

### Donn√©es collect√©es
- **Temps par √©tudiant/niveau** 
- **Nb hints utilis√©s**
- **Patterns d'erreurs communes**
- **Taux de completion Act I**

### Insights p√©dagogiques
- **Levels les plus difficiles** ‚Üí Am√©liorer √©nonc√©s
- **Hints les plus demand√©s** ‚Üí Revoir progression  
- **Abandons fr√©quents** ‚Üí Identifier friction
- **Stars performers** ‚Üí Proposer d√©fis bonus

---

*Blueprint g√©n√©r√© automatiquement*  
*CodeQuest 2.3 - Ready for Action* üöÄ`;

    // Ensure materials directory exists
    if (!fs.existsSync('materials')) {
      fs.mkdirSync('materials', { recursive: true });
    }

    fs.writeFileSync('materials/blueprint-act1.md', blueprint);
    this.log('Blueprint Act I g√©n√©r√© ‚úì', 'success');
    
    // Note: PDF generation would require additional dependencies
    this.log('Blueprint MD ‚Üí PDF : n√©cessite pandoc/wkhtmltopdf', 'warning');
  }

  updateRunbook() {
    const runbook = `# üìñ J1 - Minute by Minute Runbook

## üïò H-15 min : Setup Final

### Formateur
- [ ] **√âcran projet√©** : [Control Room](http://localhost:3000/) ouvert
- [ ] **Onglet 2** : [Student Roadmap](http://localhost:3000/roadmap) en demo
- [ ] **Terminal formateur** : \`npm run preflight:j1\` valid√© ‚úÖ
- [ ] **Kit offline** : Cl√©s USB backup pr√™tes
- [ ] **Plan B activ√©** : Seuils configur√©s (slow: 30min, stuck: 45min)

### √âtudiants
- [ ] **Node.js 16+** install√© et v√©rifi√©
- [ ] **CodeQuest d√©compress√©** dans ~/CodeQuest ou C:\\CodeQuest
- [ ] **Terminal ouvert** dans le dossier CodeQuest
- [ ] **√âditeur pr√©f√©r√©** pr√™t (VS Code, etc.)

## üïò H-5 min : Warm Welcome

### What to Say üí¨
> "Salut ! On va passer 2h √† explorer JavaScript de fa√ßon gamifi√©e avec CodeQuest 2.3. 
> Vous allez r√©soudre 7 missions, de N00 √† N06, comme dans un jeu vid√©o.
> Chaque r√©ussite d√©bloque le niveau suivant. Let's code !"

### What to Click üñ±Ô∏è
1. **[Student Roadmap](http://localhost:3000/roadmap)** en plein √©cran
2. **Hover sur N00** ‚Üí Montre le panel objectifs
3. **Hover sur N01-N06** ‚Üí "Vous d√©bloquerez au fur et √† mesure"

## üïê H+0 min : D√©marrage N00

### What to Say üí¨
> "Premi√®re mission : N00 Warmup. V√©rifiez votre environnement Node.js.
> Commande magique : \`cq start N00\`. Go !"

### What to Click üñ±Ô∏è
1. **[Control Room](http://localhost:3000/)** ‚Üí Switch sur vue formateur
2. **Load Demo Data** pour montrer l'interface
3. **Monitor la section "Alerts"** pour d√©tecter les blocages

### Expected Outcome ‚úÖ
- Tous les √©tudiants lancent \`cq start N00\`
- Fichiers apparaissent dans \`student-workspace/current/N00-warmup/\`
- Premiers \`cq validate N00\` au bout de 5 minutes

## üïï H+15 min : Checkpoint N01

### What to Say üí¨
> "Parfait ! N00 valid√© pour la plupart. Mission N01 : Variables & const.
> Objectif : formatUser avec template literals. C'est parti !"

### What to Click üñ±Ô∏è
1. **Control Room** ‚Üí **Progress Matrix** pour voir l'avancement
2. **Si alertes rouges** ‚Üí Identifier qui est stuck > 15min
3. **Assistance cibl√©e** pour les √©tudiants bloqu√©s

### Actions si probl√®me üö®
- **>5 √©tudiants bloqu√©s** ‚Üí Explication collective au tableau
- **Probl√®me technique** ‚Üí Diriger vers [Troubleshooting](../docs/TROUBLESHOOTING.md)
- **Port 3000 occup√©** ‚Üí \`PORT=3001 npm run control-room\`

## üïò H+30 min : Rythme de croisi√®re

### What to Say üí¨
> "Super progression ! Les rapides attaquent N02 Immutability.
> Les autres finissent N01. Prenez votre temps, la qualit√© avant la vitesse."

### What to Click üñ±Ô∏è
1. **Heatmap** pour voir les niveaux difficiles
2. **Export CSV** si besoin de donn√©es d√©taill√©es  
3. **Projector Mode** si besoin d'affichage grand √©cran

### Expected Distribution üìä
- **Leaders (20%)** : N02-N03
- **Groupe principal (60%)** : N01-N02  
- **Queue (20%)** : N00-N01

## üïò H+45 min : Checkpoint N03

### What to Say üí¨
> "N02 Immutability : on d√©couvre deepFreeze ! Pas de mutations autoris√©es.
> N03 Destructuring : syntaxe moderne { } et [ ]. Tr√®s utile en pratique."

### What to Click üñ±Ô∏è
1. **Plan B Panel** ‚Üí V√©rifier seuils stuck/slow
2. **Generate Class Snapshots** pour simulation si besoin
3. **Alert items** pour voir qui a besoin d'aide

### Actions si retard üêå
- **>50% still on N01** ‚Üí Plan B : Unlock hints globalement
- **Ambiance tendue** ‚Üí Pause 5 min, encouragements
- **Questions techniques** ‚Üí R√©ponses collectives

## üïê H+60 min : Collections & Transformations  

### What to Say üí¨
> "N04 Collections : le c≈ìur de JavaScript moderne ! map(), filter(), reduce().
> Ces fonctions vont changer votre fa√ßon de coder. Magie garantie ‚ú®"

### What to Click üñ±Ô∏è
1. **Student Roadmap** ‚Üí Montrer la progression visuelle
2. **Success notifications** quand des √©tudiants finissent N03-N04
3. **Stuck threshold slider** ‚Üí Ajuster si n√©cessaire (35min ‚Üí 40min)

### Expected State üìà
- **Forte dispersion** normal sur N02-N05
- **Premiers N04 completions** chez les rapides
- **N02 majority** pour le groupe principal

## üïï H+75 min : Modules & Composition

### What to Say üí¨
> "N05 Modules : composition de fonctions. Diviser pour mieux r√©gner !
> Chaque fonction fait UNE chose, et on les compose ensemble."

### What to Click üñ±Ô∏è
1. **Enriched CSV Export** pour analyser les patterns
2. **Team Filter** si groupes identifiables  
3. **Refresh View** pour update en temps r√©el

### Coaching Individuel üë•
- **Stuck >45 min** ‚Üí Intervention directe
- **0 hints used** ‚Üí Encourager l'autonomie
- **Many hints** ‚Üí V√©rifier compr√©hension concepts

## üïò H+90 min : Boss Preparation

### What to Say üí¨
> "N06 Boss Level ! Int√©gration de TOUS les concepts : variables, fonctions,
> destructuring, collections, modules. The final challenge !"

### What to Click üñ±Ô∏è
1. **Mark N08-N10 optional** si extension future
2. **Lower boss pass** si groupe en difficult√© (5/5 ‚Üí 3/5 tests)
3. **Projector mode** pour hints collectifs si n√©cessaire

### Success Metrics üéØ
- **>70%** du groupe sur N04-N06
- **Premiers completions N06** chez les leaders  
- **√ânergie positive** dans la salle

## üïê H+105 min : Boss Time

### What to Say üí¨
> "Final sprint ! N06 combine tout ce qu'on a appris. 
> Leaderboard avec scoring, formatage, et algorithmes. You got this! üí™"

### What to Click üñ±Ô∏è
1. **Live leaderboard** dans Control Room
2. **Success celebrations** pour chaque completion
3. **Screenshots** pour immortaliser les victoires

### Expected Finale üèÜ
- **30-50%** compl√®tent N06 Boss
- **80%+** atteignent au moins N04
- **100%** repartent motiv√©s !

## üïï H+120 min : Debrief & Next Steps

### What to Say üí¨
> "Bravo ! Vous avez d√©couvert JavaScript moderne : const, arrow functions,
> destructuring, map/reduce, modules. C'est le standard industrie 2024 !"

### What to Click üñ±Ô∏è
1. **Final stats** export pour analyse post-course
2. **Student screenshots** de leurs roadmaps
3. **Feedback form** si disponible

### Closing üé¨
> "CodeQuest continue avec les Acts II & III : async/await, APIs, React basics.
> Keep coding, keep learning ! üöÄ"

---

## üîó Quick Links Anchor

### üìä Dashboards
- **[Control Room - Vue Formateur](http://localhost:3000/)**
- **[Student Roadmap - Vue √âl√®ve](http://localhost:3000/roadmap)**
- **[Plan B Emergency Panel](http://localhost:3000/#plan-b-section)**

### üìã Checklists  
- **[Pre-flight J1](../scripts/preflight-j1.js)** : \`npm run preflight:j1\`
- **[Smoke Test](../scripts/smoke-test.js)** : \`npm run smoke-test\`
- **[Troubleshooting](../docs/TROUBLESHOOTING.md)** : Solutions probl√®mes

### üéØ Key Commands
- **Start scene** : \`cq start N00\`
- **Validate** : \`cq validate N00\` 
- **Hints** : \`cq help-me N00\`
- **Status** : \`cq status\`
- **Reset** : \`cq reset N00\`

### üÜò Emergency Actions
- **Port conflict** : \`PORT=3001 npm run control-room\`
- **Offline fallback** : D√©compresser \`codequest-offline-kit.zip\`
- **Demo data** : \`npm run demo\` + Load Demo Data button
- **Plan B unlock** : Toggles dans Control Room Plan B panel

---

*Runbook mis √† jour automatiquement*  
*Ready for J1 - Let's code! üéÆ*`;

    // Ensure runbooks directory exists
    if (!fs.existsSync('runbooks')) {
      fs.mkdirSync('runbooks', { recursive: true });
    }

    fs.writeFileSync('runbooks/J1-minute-by-minute.md', runbook);
    this.log('Runbook J1 mis √† jour ‚úì', 'success');
  }

  // Final report
  generateReport() {
    const duration = Math.round((Date.now() - this.startTime) / 1000);
    
    console.log('\n' + '='.repeat(60));
    console.log('üöÄ PREFLIGHT J1 - RAPPORT FINAL');
    console.log('='.repeat(60));
    
    const successCount = this.checks.filter(c => c.type === 'success').length;
    const errorCount = this.errors.length;
    const warningCount = this.warnings.length;
    
    console.log(`\nüìä R√©sum√© (${duration}s):`);
    console.log(`  ‚úÖ Succ√®s: ${successCount}`);
    console.log(`  ‚ùå Erreurs: ${errorCount}`);
    console.log(`  ‚ö†Ô∏è Avertissements: ${warningCount}`);

    if (errorCount > 0) {
      console.log('\n‚ùå Erreurs √† corriger:');
      this.errors.forEach(error => console.log(`  - ${error}`));
    }

    console.log('\nüéØ Vues ouvertes automatiquement:');
    console.log('  - Control Room: http://localhost:3000/');
    console.log('  - Student Roadmap: http://localhost:3000/roadmap');

    console.log('\nüìã Mat√©riel g√©n√©r√©:');
    console.log('  - materials/video-script-3min.md');
    console.log('  - materials/blueprint-act1.md'); 
    console.log('  - runbooks/J1-minute-by-minute.md');

    if (errorCount === 0) {
      console.log('\nüéâ READY FOR J1! Tous les syst√®mes sont GO! üöÄ');
      process.exit(0);
    } else {
      console.log('\n‚ö†Ô∏è Corriger les erreurs avant J1');
      process.exit(1);
    }
  }

  // Cleanup
  cleanup() {
    if (this.serverProcess && !this.serverProcess.killed) {
      this.serverProcess.kill();
    }
  }

  // Main execution
  async run() {
    console.log('üöÄ CodeQuest 2.3 - J1 Pre-flight Checklist\n');
    
    // Handle interruptions
    process.on('SIGINT', () => {
      this.cleanup();
      process.exit(1);
    });

    try {
      await this.checkEnvironment();
      await this.testCLICommands();
      this.checkOfflinePackage();
      await this.startServersAndViews();
      
      // Wait a bit for views to load
      await this.sleep(2000);
      
      this.generateMaterials();
      this.generateReport();
      
    } catch (error) {
      console.error('Erreur fatale:', error);
      this.cleanup();
      process.exit(1);
    }
  }
}

// Run if called directly
if (require.main === module) {
  const preflight = new PreflightJ1();
  preflight.run();
}

module.exports = PreflightJ1;